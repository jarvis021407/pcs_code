clc;
clear all;
close all;
%delta modulation = 1-bit differential pulse code modulation (DPCM)
predictor = [0 1]; % y(k)=x(k-1)predictor specifies the predictive transfer function
%If predictor is an order-one transfer function, the modulation is called a delta modulation.
%partition = [-1:.1:.9];codebook = [-1:.1:1];
step=0.2; %SFs>=2pifA
partition = [0];%partition is a vector whose entries give the endpoints of the partition intervals
codebook = [-1*step step]; %DM quantizercodebook, a vector whose length exceeds the length of partition by one

t = [0:pi/20:4*pi];
x = 1.1*sin(2*pi*0.1*t); % Original signal, a sine wave
%t = [0:0.1:4*pi] % Original signal

% Quantize x(t) using DPCM.
encodedx = dpcmenco(x,codebook,partition,predictor);%implements differential pulse code modulation
%to encode the vector sig

% Try to recover x from the modulated signal.
decodedx = dpcmdeco(encodedx,codebook,predictor);%implements differential pulse code demodulation to decode the vector indx
distor = sum((x-decodedx).^2)/length(x) % Mean square error
%L = length( X ) returns the length of the largest array dimension in X 
% plots
figure,subplot(3,1,1);plot(t,x);xlabel('time');title('original signal');
subplot(3,1,2);
stairs(t,10*codebook(encodedx+1),'--');%stairs( X , Y ) plots the elements in Y at the locations specified by X 
xlabel('time');title('DM output');
subplot(3,1,3);plot(t,x);hold;
stairs(t,decodedx);grid;xlabel('time');title('received signal');
